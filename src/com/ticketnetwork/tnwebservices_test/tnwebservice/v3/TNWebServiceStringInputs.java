
package com.ticketnetwork.tnwebservices_test.tnwebservice.v3;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.1 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "TNWebServiceStringInputs", targetNamespace = "http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", wsdlLocation = "http://tnwebservices-test.ticketnetwork.com/TNWebservice/v3.0/TNWebserviceStringInputs.asmx?WSDL")
public class TNWebServiceStringInputs
    extends Service
{

    private final static URL TNWEBSERVICESTRINGINPUTS_WSDL_LOCATION;

    static {
        URL url = null;
        try {
            url = new URL("http://tnwebservices-test.ticketnetwork.com/TNWebservice/v3.0/TNWebserviceStringInputs.asmx?WSDL");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        TNWEBSERVICESTRINGINPUTS_WSDL_LOCATION = url;
    }

    public TNWebServiceStringInputs(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TNWebServiceStringInputs() {
        super(TNWEBSERVICESTRINGINPUTS_WSDL_LOCATION, new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputs"));
    }

    /**
     * 
     * @return
     *     returns TNWebServiceStringInputsSoap
     */
    @WebEndpoint(name = "TNWebServiceStringInputsSoap")
    public TNWebServiceStringInputsSoap getTNWebServiceStringInputsSoap() {
        return (TNWebServiceStringInputsSoap)super.getPort(new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputsSoap"), TNWebServiceStringInputsSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TNWebServiceStringInputsSoap
     */
    @WebEndpoint(name = "TNWebServiceStringInputsSoap")
    public TNWebServiceStringInputsSoap getTNWebServiceStringInputsSoap(WebServiceFeature... features) {
        return (TNWebServiceStringInputsSoap)super.getPort(new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputsSoap"), TNWebServiceStringInputsSoap.class, features);
    }

    /**
     * 
     * @return
     *     returns TNWebServiceStringInputsSoap
     */
    @WebEndpoint(name = "TNWebServiceStringInputsSoap12")
    public TNWebServiceStringInputsSoap getTNWebServiceStringInputsSoap12() {
        return (TNWebServiceStringInputsSoap)super.getPort(new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputsSoap12"), TNWebServiceStringInputsSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TNWebServiceStringInputsSoap
     */
    @WebEndpoint(name = "TNWebServiceStringInputsSoap12")
    public TNWebServiceStringInputsSoap getTNWebServiceStringInputsSoap12(WebServiceFeature... features) {
        return (TNWebServiceStringInputsSoap)super.getPort(new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputsSoap12"), TNWebServiceStringInputsSoap.class, features);
    }

    /**
     * 
     * @return
     *     returns TNWebServiceStringInputsHttpGet
     */
    @WebEndpoint(name = "TNWebServiceStringInputsHttpGet")
    public TNWebServiceStringInputsHttpGet getTNWebServiceStringInputsHttpGet() {
        return (TNWebServiceStringInputsHttpGet)super.getPort(new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputsHttpGet"), TNWebServiceStringInputsHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TNWebServiceStringInputsHttpGet
     */
    @WebEndpoint(name = "TNWebServiceStringInputsHttpGet")
    public TNWebServiceStringInputsHttpGet getTNWebServiceStringInputsHttpGet(WebServiceFeature... features) {
        return (TNWebServiceStringInputsHttpGet)super.getPort(new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputsHttpGet"), TNWebServiceStringInputsHttpGet.class, features);
    }

    /**
     * 
     * @return
     *     returns TNWebServiceStringInputsHttpPost
     */
    @WebEndpoint(name = "TNWebServiceStringInputsHttpPost")
    public TNWebServiceStringInputsHttpPost getTNWebServiceStringInputsHttpPost() {
        return (TNWebServiceStringInputsHttpPost)super.getPort(new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputsHttpPost"), TNWebServiceStringInputsHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TNWebServiceStringInputsHttpPost
     */
    @WebEndpoint(name = "TNWebServiceStringInputsHttpPost")
    public TNWebServiceStringInputsHttpPost getTNWebServiceStringInputsHttpPost(WebServiceFeature... features) {
        return (TNWebServiceStringInputsHttpPost)super.getPort(new QName("http://tnwebservices-test.ticketnetwork.com/tnwebservice/v3.0", "TNWebServiceStringInputsHttpPost"), TNWebServiceStringInputsHttpPost.class, features);
    }

}
